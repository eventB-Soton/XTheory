// automatically generated by Xtext
grammar ac.soton.xtheory.sc.SCTheory with org.eclipse.xtext.common.Terminals

import "http://soton.ac.uk/models/eventb/theoryextension/2018/sc" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SCTheory returns SCTheory:
	{SCTheory}
	'SCTheory'
	name=EString
	'{'
		('parameters' '(' parameters+=[SCParameter|EString] ( "," parameters+=[SCParameter|EString])* ')' )?
		('internalObjects' '(' internalObjects+=[ecore::EObject|EString] ( "," internalObjects+=[ecore::EObject|EString])* ')' )?
		('ruleblocks' '(' ruleblocks+=[SCRuleblock|EString] ( "," ruleblocks+=[SCRuleblock|EString])* ')' )?
	'}';















EString returns ecore::EString:
	STRING | ID;

SCParameter returns SCParameter:
	{SCParameter}
	'SCParameter'
	name=EString
	'{'
		('typeEnvironment' typeEnvironment=[TypeEnvironment|EString])?
		('ML' ML=[ML|EString])?
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

SCRuleblock returns SCRuleblock:
	'SCRuleblock'
	'{'
		'rules' '(' rules+=[SCRule|EString] ( "," rules+=[SCRule|EString])* ')' 
		('variables' '(' variables+=[SCVariable|EString] ( "," variables+=[SCVariable|EString])* ')' )?
	'}';

TypeEnvironment returns TypeEnvironment:
	{TypeEnvironment}
	'TypeEnvironment'
	;

ML returns ML:
	{ML}
	'ML'
	;

SCRule returns SCRule:
	{SCRule}
	'SCRule'
	name=EString
	'{'
		('rrule' rrule=[SCRewriteRule|EString])?
		('irule' irule=[SCInferenceRule|EString])?
	'}';

SCVariable returns SCVariable:
	{SCVariable}
	'SCVariable'
	name=EString
	'{'
		('type' type=EString)?
	'}';

SCRewriteRule returns SCRewriteRule:
	'SCRewriteRule'
	'{'
		'pattern' pattern=EString
		('urule' urule=[SCUnconditionalRewrite|EString])?
		('crule' crule=[SCConditionalRewrite|EString])?
	'}';

SCInferenceRule returns SCInferenceRule:
	'SCInferenceRule'
	'{'
		('given' '(' given+=[SCGiven|EString] ( "," given+=[SCGiven|EString])* ')' )?
		'infer' infer=[SCInfer|EString]
	'}';

SCUnconditionalRewrite returns SCUnconditionalRewrite:
	{SCUnconditionalRewrite}
	'SCUnconditionalRewrite'
	'{'
		('rhs' '{' rhs+=EString ( "," rhs+=EString)* '}' )?
	'}';

SCConditionalRewrite returns SCConditionalRewrite:
	{SCConditionalRewrite}
	'SCConditionalRewrite'
	'{'
		('rewrites' '(' rewrites+=[SCConditionalRewriteRule|EString] ( "," rewrites+=[SCConditionalRewriteRule|EString])* ')' )?
	'}';

SCConditionalRewriteRule returns SCConditionalRewriteRule:
	'SCConditionalRewriteRule'
	'{'
		'lhs' lhs=EString
		'rhs' rhs=EString
	'}';

SCGiven returns SCGiven:
	required?='required'
	'SCGiven'
	'{'
		'expression' expression=EString
	'}';

SCInfer returns SCInfer:
	'SCInfer'
	'{'
		'expression' expression=EString
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';
