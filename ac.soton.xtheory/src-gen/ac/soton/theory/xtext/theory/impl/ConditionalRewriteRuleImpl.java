/**
 * generated by Xtext 2.14.0
 */
package ac.soton.theory.xtext.theory.impl;

import ac.soton.theory.xtext.theory.ConditionalRewriteRule;
import ac.soton.theory.xtext.theory.TheoryPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Conditional Rewrite Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.ConditionalRewriteRuleImpl#getLsh <em>Lsh</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.ConditionalRewriteRuleImpl#getRhs <em>Rhs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionalRewriteRuleImpl extends MinimalEObjectImpl.Container implements ConditionalRewriteRule
{
  /**
   * The default value of the '{@link #getLsh() <em>Lsh</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLsh()
   * @generated
   * @ordered
   */
  protected static final String LSH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLsh() <em>Lsh</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLsh()
   * @generated
   * @ordered
   */
  protected String lsh = LSH_EDEFAULT;

  /**
   * The default value of the '{@link #getRhs() <em>Rhs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRhs()
   * @generated
   * @ordered
   */
  protected static final String RHS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRhs() <em>Rhs</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRhs()
   * @generated
   * @ordered
   */
  protected String rhs = RHS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionalRewriteRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TheoryPackage.Literals.CONDITIONAL_REWRITE_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLsh()
  {
    return lsh;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLsh(String newLsh)
  {
    String oldLsh = lsh;
    lsh = newLsh;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.CONDITIONAL_REWRITE_RULE__LSH, oldLsh, lsh));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRhs()
  {
    return rhs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRhs(String newRhs)
  {
    String oldRhs = rhs;
    rhs = newRhs;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.CONDITIONAL_REWRITE_RULE__RHS, oldRhs, rhs));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TheoryPackage.CONDITIONAL_REWRITE_RULE__LSH:
        return getLsh();
      case TheoryPackage.CONDITIONAL_REWRITE_RULE__RHS:
        return getRhs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TheoryPackage.CONDITIONAL_REWRITE_RULE__LSH:
        setLsh((String)newValue);
        return;
      case TheoryPackage.CONDITIONAL_REWRITE_RULE__RHS:
        setRhs((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TheoryPackage.CONDITIONAL_REWRITE_RULE__LSH:
        setLsh(LSH_EDEFAULT);
        return;
      case TheoryPackage.CONDITIONAL_REWRITE_RULE__RHS:
        setRhs(RHS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TheoryPackage.CONDITIONAL_REWRITE_RULE__LSH:
        return LSH_EDEFAULT == null ? lsh != null : !LSH_EDEFAULT.equals(lsh);
      case TheoryPackage.CONDITIONAL_REWRITE_RULE__RHS:
        return RHS_EDEFAULT == null ? rhs != null : !RHS_EDEFAULT.equals(rhs);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (lsh: ");
    result.append(lsh);
    result.append(", rhs: ");
    result.append(rhs);
    result.append(')');
    return result.toString();
  }

} //ConditionalRewriteRuleImpl
