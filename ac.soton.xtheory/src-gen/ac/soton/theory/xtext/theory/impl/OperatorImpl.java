/**
 * generated by Xtext 2.14.0
 */
package ac.soton.theory.xtext.theory.impl;

import ac.soton.theory.xtext.theory.Argument;
import ac.soton.theory.xtext.theory.Case;
import ac.soton.theory.xtext.theory.Notation;
import ac.soton.theory.xtext.theory.Operator;
import ac.soton.theory.xtext.theory.TheoryPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Operator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#getComments <em>Comments</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#getName <em>Name</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#getArguments <em>Arguments</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#getType <em>Type</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#getNotation <em>Notation</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#isAssocitive <em>Associtive</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#isCommutative <em>Commutative</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#getPrecedent <em>Precedent</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#getWd <em>Wd</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#getDefinition <em>Definition</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#getCase <em>Case</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.OperatorImpl#getCases <em>Cases</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OperatorImpl extends MinimalEObjectImpl.Container implements Operator
{
  /**
   * The default value of the '{@link #getComments() <em>Comments</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComments()
   * @generated
   * @ordered
   */
  protected static final String COMMENTS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getComments() <em>Comments</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComments()
   * @generated
   * @ordered
   */
  protected String comments = COMMENTS_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getArguments() <em>Arguments</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArguments()
   * @generated
   * @ordered
   */
  protected EList<Argument> arguments;

  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getNotation() <em>Notation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNotation()
   * @generated
   * @ordered
   */
  protected static final Notation NOTATION_EDEFAULT = Notation.PREFIX;

  /**
   * The cached value of the '{@link #getNotation() <em>Notation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNotation()
   * @generated
   * @ordered
   */
  protected Notation notation = NOTATION_EDEFAULT;

  /**
   * The default value of the '{@link #isAssocitive() <em>Associtive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAssocitive()
   * @generated
   * @ordered
   */
  protected static final boolean ASSOCITIVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAssocitive() <em>Associtive</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAssocitive()
   * @generated
   * @ordered
   */
  protected boolean associtive = ASSOCITIVE_EDEFAULT;

  /**
   * The default value of the '{@link #isCommutative() <em>Commutative</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCommutative()
   * @generated
   * @ordered
   */
  protected static final boolean COMMUTATIVE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isCommutative() <em>Commutative</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCommutative()
   * @generated
   * @ordered
   */
  protected boolean commutative = COMMUTATIVE_EDEFAULT;

  /**
   * The default value of the '{@link #getPrecedent() <em>Precedent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrecedent()
   * @generated
   * @ordered
   */
  protected static final int PRECEDENT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPrecedent() <em>Precedent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrecedent()
   * @generated
   * @ordered
   */
  protected int precedent = PRECEDENT_EDEFAULT;

  /**
   * The default value of the '{@link #getWd() <em>Wd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWd()
   * @generated
   * @ordered
   */
  protected static final String WD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWd() <em>Wd</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWd()
   * @generated
   * @ordered
   */
  protected String wd = WD_EDEFAULT;

  /**
   * The default value of the '{@link #getDefinition() <em>Definition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinition()
   * @generated
   * @ordered
   */
  protected static final String DEFINITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDefinition() <em>Definition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefinition()
   * @generated
   * @ordered
   */
  protected String definition = DEFINITION_EDEFAULT;

  /**
   * The default value of the '{@link #getCase() <em>Case</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCase()
   * @generated
   * @ordered
   */
  protected static final String CASE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCase() <em>Case</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCase()
   * @generated
   * @ordered
   */
  protected String case_ = CASE_EDEFAULT;

  /**
   * The cached value of the '{@link #getCases() <em>Cases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCases()
   * @generated
   * @ordered
   */
  protected EList<Case> cases;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OperatorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TheoryPackage.Literals.OPERATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getComments()
  {
    return comments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setComments(String newComments)
  {
    String oldComments = comments;
    comments = newComments;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.OPERATOR__COMMENTS, oldComments, comments));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.OPERATOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Argument> getArguments()
  {
    if (arguments == null)
    {
      arguments = new EObjectContainmentEList<Argument>(Argument.class, this, TheoryPackage.OPERATOR__ARGUMENTS);
    }
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.OPERATOR__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Notation getNotation()
  {
    return notation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNotation(Notation newNotation)
  {
    Notation oldNotation = notation;
    notation = newNotation == null ? NOTATION_EDEFAULT : newNotation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.OPERATOR__NOTATION, oldNotation, notation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAssocitive()
  {
    return associtive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAssocitive(boolean newAssocitive)
  {
    boolean oldAssocitive = associtive;
    associtive = newAssocitive;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.OPERATOR__ASSOCITIVE, oldAssocitive, associtive));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isCommutative()
  {
    return commutative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCommutative(boolean newCommutative)
  {
    boolean oldCommutative = commutative;
    commutative = newCommutative;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.OPERATOR__COMMUTATIVE, oldCommutative, commutative));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getPrecedent()
  {
    return precedent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrecedent(int newPrecedent)
  {
    int oldPrecedent = precedent;
    precedent = newPrecedent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.OPERATOR__PRECEDENT, oldPrecedent, precedent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getWd()
  {
    return wd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWd(String newWd)
  {
    String oldWd = wd;
    wd = newWd;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.OPERATOR__WD, oldWd, wd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDefinition()
  {
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDefinition(String newDefinition)
  {
    String oldDefinition = definition;
    definition = newDefinition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.OPERATOR__DEFINITION, oldDefinition, definition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCase()
  {
    return case_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCase(String newCase)
  {
    String oldCase = case_;
    case_ = newCase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.OPERATOR__CASE, oldCase, case_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Case> getCases()
  {
    if (cases == null)
    {
      cases = new EObjectContainmentEList<Case>(Case.class, this, TheoryPackage.OPERATOR__CASES);
    }
    return cases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TheoryPackage.OPERATOR__ARGUMENTS:
        return ((InternalEList<?>)getArguments()).basicRemove(otherEnd, msgs);
      case TheoryPackage.OPERATOR__CASES:
        return ((InternalEList<?>)getCases()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TheoryPackage.OPERATOR__COMMENTS:
        return getComments();
      case TheoryPackage.OPERATOR__NAME:
        return getName();
      case TheoryPackage.OPERATOR__ARGUMENTS:
        return getArguments();
      case TheoryPackage.OPERATOR__TYPE:
        return getType();
      case TheoryPackage.OPERATOR__NOTATION:
        return getNotation();
      case TheoryPackage.OPERATOR__ASSOCITIVE:
        return isAssocitive();
      case TheoryPackage.OPERATOR__COMMUTATIVE:
        return isCommutative();
      case TheoryPackage.OPERATOR__PRECEDENT:
        return getPrecedent();
      case TheoryPackage.OPERATOR__WD:
        return getWd();
      case TheoryPackage.OPERATOR__DEFINITION:
        return getDefinition();
      case TheoryPackage.OPERATOR__CASE:
        return getCase();
      case TheoryPackage.OPERATOR__CASES:
        return getCases();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TheoryPackage.OPERATOR__COMMENTS:
        setComments((String)newValue);
        return;
      case TheoryPackage.OPERATOR__NAME:
        setName((String)newValue);
        return;
      case TheoryPackage.OPERATOR__ARGUMENTS:
        getArguments().clear();
        getArguments().addAll((Collection<? extends Argument>)newValue);
        return;
      case TheoryPackage.OPERATOR__TYPE:
        setType((String)newValue);
        return;
      case TheoryPackage.OPERATOR__NOTATION:
        setNotation((Notation)newValue);
        return;
      case TheoryPackage.OPERATOR__ASSOCITIVE:
        setAssocitive((Boolean)newValue);
        return;
      case TheoryPackage.OPERATOR__COMMUTATIVE:
        setCommutative((Boolean)newValue);
        return;
      case TheoryPackage.OPERATOR__PRECEDENT:
        setPrecedent((Integer)newValue);
        return;
      case TheoryPackage.OPERATOR__WD:
        setWd((String)newValue);
        return;
      case TheoryPackage.OPERATOR__DEFINITION:
        setDefinition((String)newValue);
        return;
      case TheoryPackage.OPERATOR__CASE:
        setCase((String)newValue);
        return;
      case TheoryPackage.OPERATOR__CASES:
        getCases().clear();
        getCases().addAll((Collection<? extends Case>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TheoryPackage.OPERATOR__COMMENTS:
        setComments(COMMENTS_EDEFAULT);
        return;
      case TheoryPackage.OPERATOR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case TheoryPackage.OPERATOR__ARGUMENTS:
        getArguments().clear();
        return;
      case TheoryPackage.OPERATOR__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case TheoryPackage.OPERATOR__NOTATION:
        setNotation(NOTATION_EDEFAULT);
        return;
      case TheoryPackage.OPERATOR__ASSOCITIVE:
        setAssocitive(ASSOCITIVE_EDEFAULT);
        return;
      case TheoryPackage.OPERATOR__COMMUTATIVE:
        setCommutative(COMMUTATIVE_EDEFAULT);
        return;
      case TheoryPackage.OPERATOR__PRECEDENT:
        setPrecedent(PRECEDENT_EDEFAULT);
        return;
      case TheoryPackage.OPERATOR__WD:
        setWd(WD_EDEFAULT);
        return;
      case TheoryPackage.OPERATOR__DEFINITION:
        setDefinition(DEFINITION_EDEFAULT);
        return;
      case TheoryPackage.OPERATOR__CASE:
        setCase(CASE_EDEFAULT);
        return;
      case TheoryPackage.OPERATOR__CASES:
        getCases().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TheoryPackage.OPERATOR__COMMENTS:
        return COMMENTS_EDEFAULT == null ? comments != null : !COMMENTS_EDEFAULT.equals(comments);
      case TheoryPackage.OPERATOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case TheoryPackage.OPERATOR__ARGUMENTS:
        return arguments != null && !arguments.isEmpty();
      case TheoryPackage.OPERATOR__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case TheoryPackage.OPERATOR__NOTATION:
        return notation != NOTATION_EDEFAULT;
      case TheoryPackage.OPERATOR__ASSOCITIVE:
        return associtive != ASSOCITIVE_EDEFAULT;
      case TheoryPackage.OPERATOR__COMMUTATIVE:
        return commutative != COMMUTATIVE_EDEFAULT;
      case TheoryPackage.OPERATOR__PRECEDENT:
        return precedent != PRECEDENT_EDEFAULT;
      case TheoryPackage.OPERATOR__WD:
        return WD_EDEFAULT == null ? wd != null : !WD_EDEFAULT.equals(wd);
      case TheoryPackage.OPERATOR__DEFINITION:
        return DEFINITION_EDEFAULT == null ? definition != null : !DEFINITION_EDEFAULT.equals(definition);
      case TheoryPackage.OPERATOR__CASE:
        return CASE_EDEFAULT == null ? case_ != null : !CASE_EDEFAULT.equals(case_);
      case TheoryPackage.OPERATOR__CASES:
        return cases != null && !cases.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (comments: ");
    result.append(comments);
    result.append(", name: ");
    result.append(name);
    result.append(", type: ");
    result.append(type);
    result.append(", notation: ");
    result.append(notation);
    result.append(", associtive: ");
    result.append(associtive);
    result.append(", commutative: ");
    result.append(commutative);
    result.append(", precedent: ");
    result.append(precedent);
    result.append(", wd: ");
    result.append(wd);
    result.append(", definition: ");
    result.append(definition);
    result.append(", case: ");
    result.append(case_);
    result.append(')');
    return result.toString();
  }

} //OperatorImpl
