/**
 * generated by Xtext 2.14.0
 */
package ac.soton.theory.xtext.theory.impl;

import ac.soton.theory.xtext.theory.Axiom;
import ac.soton.theory.xtext.theory.Operator;
import ac.soton.theory.xtext.theory.Parameter;
import ac.soton.theory.xtext.theory.Rule;
import ac.soton.theory.xtext.theory.Theory;
import ac.soton.theory.xtext.theory.TheoryPackage;
import ac.soton.theory.xtext.theory.Type;
import ac.soton.theory.xtext.theory.Variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Theory</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.TheoryImpl#getName <em>Name</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.TheoryImpl#getParameters <em>Parameters</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.TheoryImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.TheoryImpl#getTypes <em>Types</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.TheoryImpl#getOperators <em>Operators</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.TheoryImpl#getAxioms <em>Axioms</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.TheoryImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.TheoryImpl#getRules <em>Rules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TheoryImpl extends MinimalEObjectImpl.Container implements Theory
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<Parameter> parameters;

  /**
   * The cached value of the '{@link #getImports() <em>Imports</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImports()
   * @generated
   * @ordered
   */
  protected EList<String> imports;

  /**
   * The cached value of the '{@link #getTypes() <em>Types</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypes()
   * @generated
   * @ordered
   */
  protected EList<Type> types;

  /**
   * The cached value of the '{@link #getOperators() <em>Operators</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperators()
   * @generated
   * @ordered
   */
  protected EList<Operator> operators;

  /**
   * The cached value of the '{@link #getAxioms() <em>Axioms</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAxioms()
   * @generated
   * @ordered
   */
  protected EList<Axiom> axioms;

  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected EList<Variable> variables;

  /**
   * The cached value of the '{@link #getRules() <em>Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRules()
   * @generated
   * @ordered
   */
  protected EList<Rule> rules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TheoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TheoryPackage.Literals.THEORY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.THEORY__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Parameter> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EObjectContainmentEList<Parameter>(Parameter.class, this, TheoryPackage.THEORY__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getImports()
  {
    if (imports == null)
    {
      imports = new EDataTypeEList<String>(String.class, this, TheoryPackage.THEORY__IMPORTS);
    }
    return imports;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Type> getTypes()
  {
    if (types == null)
    {
      types = new EObjectContainmentEList<Type>(Type.class, this, TheoryPackage.THEORY__TYPES);
    }
    return types;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Operator> getOperators()
  {
    if (operators == null)
    {
      operators = new EObjectContainmentEList<Operator>(Operator.class, this, TheoryPackage.THEORY__OPERATORS);
    }
    return operators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Axiom> getAxioms()
  {
    if (axioms == null)
    {
      axioms = new EObjectContainmentEList<Axiom>(Axiom.class, this, TheoryPackage.THEORY__AXIOMS);
    }
    return axioms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Variable> getVariables()
  {
    if (variables == null)
    {
      variables = new EObjectContainmentEList<Variable>(Variable.class, this, TheoryPackage.THEORY__VARIABLES);
    }
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Rule> getRules()
  {
    if (rules == null)
    {
      rules = new EObjectContainmentEList<Rule>(Rule.class, this, TheoryPackage.THEORY__RULES);
    }
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TheoryPackage.THEORY__PARAMETERS:
        return ((InternalEList<?>)getParameters()).basicRemove(otherEnd, msgs);
      case TheoryPackage.THEORY__TYPES:
        return ((InternalEList<?>)getTypes()).basicRemove(otherEnd, msgs);
      case TheoryPackage.THEORY__OPERATORS:
        return ((InternalEList<?>)getOperators()).basicRemove(otherEnd, msgs);
      case TheoryPackage.THEORY__AXIOMS:
        return ((InternalEList<?>)getAxioms()).basicRemove(otherEnd, msgs);
      case TheoryPackage.THEORY__VARIABLES:
        return ((InternalEList<?>)getVariables()).basicRemove(otherEnd, msgs);
      case TheoryPackage.THEORY__RULES:
        return ((InternalEList<?>)getRules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TheoryPackage.THEORY__NAME:
        return getName();
      case TheoryPackage.THEORY__PARAMETERS:
        return getParameters();
      case TheoryPackage.THEORY__IMPORTS:
        return getImports();
      case TheoryPackage.THEORY__TYPES:
        return getTypes();
      case TheoryPackage.THEORY__OPERATORS:
        return getOperators();
      case TheoryPackage.THEORY__AXIOMS:
        return getAxioms();
      case TheoryPackage.THEORY__VARIABLES:
        return getVariables();
      case TheoryPackage.THEORY__RULES:
        return getRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TheoryPackage.THEORY__NAME:
        setName((String)newValue);
        return;
      case TheoryPackage.THEORY__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends Parameter>)newValue);
        return;
      case TheoryPackage.THEORY__IMPORTS:
        getImports().clear();
        getImports().addAll((Collection<? extends String>)newValue);
        return;
      case TheoryPackage.THEORY__TYPES:
        getTypes().clear();
        getTypes().addAll((Collection<? extends Type>)newValue);
        return;
      case TheoryPackage.THEORY__OPERATORS:
        getOperators().clear();
        getOperators().addAll((Collection<? extends Operator>)newValue);
        return;
      case TheoryPackage.THEORY__AXIOMS:
        getAxioms().clear();
        getAxioms().addAll((Collection<? extends Axiom>)newValue);
        return;
      case TheoryPackage.THEORY__VARIABLES:
        getVariables().clear();
        getVariables().addAll((Collection<? extends Variable>)newValue);
        return;
      case TheoryPackage.THEORY__RULES:
        getRules().clear();
        getRules().addAll((Collection<? extends Rule>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TheoryPackage.THEORY__NAME:
        setName(NAME_EDEFAULT);
        return;
      case TheoryPackage.THEORY__PARAMETERS:
        getParameters().clear();
        return;
      case TheoryPackage.THEORY__IMPORTS:
        getImports().clear();
        return;
      case TheoryPackage.THEORY__TYPES:
        getTypes().clear();
        return;
      case TheoryPackage.THEORY__OPERATORS:
        getOperators().clear();
        return;
      case TheoryPackage.THEORY__AXIOMS:
        getAxioms().clear();
        return;
      case TheoryPackage.THEORY__VARIABLES:
        getVariables().clear();
        return;
      case TheoryPackage.THEORY__RULES:
        getRules().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TheoryPackage.THEORY__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case TheoryPackage.THEORY__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
      case TheoryPackage.THEORY__IMPORTS:
        return imports != null && !imports.isEmpty();
      case TheoryPackage.THEORY__TYPES:
        return types != null && !types.isEmpty();
      case TheoryPackage.THEORY__OPERATORS:
        return operators != null && !operators.isEmpty();
      case TheoryPackage.THEORY__AXIOMS:
        return axioms != null && !axioms.isEmpty();
      case TheoryPackage.THEORY__VARIABLES:
        return variables != null && !variables.isEmpty();
      case TheoryPackage.THEORY__RULES:
        return rules != null && !rules.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", imports: ");
    result.append(imports);
    result.append(')');
    return result.toString();
  }

} //TheoryImpl
