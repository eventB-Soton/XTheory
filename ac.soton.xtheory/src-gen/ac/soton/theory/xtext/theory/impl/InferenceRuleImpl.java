/**
 * generated by Xtext 2.14.0
 */
package ac.soton.theory.xtext.theory.impl;

import ac.soton.theory.xtext.theory.Given;
import ac.soton.theory.xtext.theory.Infer;
import ac.soton.theory.xtext.theory.InferenceRule;
import ac.soton.theory.xtext.theory.TheoryPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Inference Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.InferenceRuleImpl#getGiven <em>Given</em>}</li>
 *   <li>{@link ac.soton.theory.xtext.theory.impl.InferenceRuleImpl#getInfer <em>Infer</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InferenceRuleImpl extends MinimalEObjectImpl.Container implements InferenceRule
{
  /**
   * The cached value of the '{@link #getGiven() <em>Given</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGiven()
   * @generated
   * @ordered
   */
  protected EList<Given> given;

  /**
   * The cached value of the '{@link #getInfer() <em>Infer</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInfer()
   * @generated
   * @ordered
   */
  protected Infer infer;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InferenceRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TheoryPackage.Literals.INFERENCE_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Given> getGiven()
  {
    if (given == null)
    {
      given = new EObjectContainmentEList<Given>(Given.class, this, TheoryPackage.INFERENCE_RULE__GIVEN);
    }
    return given;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Infer getInfer()
  {
    return infer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInfer(Infer newInfer, NotificationChain msgs)
  {
    Infer oldInfer = infer;
    infer = newInfer;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TheoryPackage.INFERENCE_RULE__INFER, oldInfer, newInfer);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInfer(Infer newInfer)
  {
    if (newInfer != infer)
    {
      NotificationChain msgs = null;
      if (infer != null)
        msgs = ((InternalEObject)infer).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TheoryPackage.INFERENCE_RULE__INFER, null, msgs);
      if (newInfer != null)
        msgs = ((InternalEObject)newInfer).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TheoryPackage.INFERENCE_RULE__INFER, null, msgs);
      msgs = basicSetInfer(newInfer, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TheoryPackage.INFERENCE_RULE__INFER, newInfer, newInfer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TheoryPackage.INFERENCE_RULE__GIVEN:
        return ((InternalEList<?>)getGiven()).basicRemove(otherEnd, msgs);
      case TheoryPackage.INFERENCE_RULE__INFER:
        return basicSetInfer(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TheoryPackage.INFERENCE_RULE__GIVEN:
        return getGiven();
      case TheoryPackage.INFERENCE_RULE__INFER:
        return getInfer();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TheoryPackage.INFERENCE_RULE__GIVEN:
        getGiven().clear();
        getGiven().addAll((Collection<? extends Given>)newValue);
        return;
      case TheoryPackage.INFERENCE_RULE__INFER:
        setInfer((Infer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TheoryPackage.INFERENCE_RULE__GIVEN:
        getGiven().clear();
        return;
      case TheoryPackage.INFERENCE_RULE__INFER:
        setInfer((Infer)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TheoryPackage.INFERENCE_RULE__GIVEN:
        return given != null && !given.isEmpty();
      case TheoryPackage.INFERENCE_RULE__INFER:
        return infer != null;
    }
    return super.eIsSet(featureID);
  }

} //InferenceRuleImpl
